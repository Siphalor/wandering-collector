plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.3.1'
	id 'com.github.breadmoirai.github-release' version '2.4.1'
	id 'org.cadixdev.licenser' version '0.6.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version + "+mc" + project.minecraft_version
group = project.maven_group

loom {}

repositories {
	maven { url "https://maven.siphalor.de" }
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://jitpack.io" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	include(modImplementation(fabricApi.module("fabric-api-base", project.fabric_api_version)))
	include(modImplementation(fabricApi.module("fabric-networking-api-v1", project.fabric_api_version)))
	include(modImplementation(fabricApi.module("fabric-registry-sync-v0", project.fabric_api_version)))

	include(modApi(platform("de.siphalor.tweed4:tweed4-bom-$minecraft_major_version:$tweed_version")))
	[
	        "base", "annotated",
			"data", "data-hjson",
			"tailor-screen", "tailor-coat",
			"tailor-lang-json-descriptions"
	].each { include(modApi("de.siphalor.tweed4:tweed4-$it-$minecraft_major_version")) }
	include(modApi("de.siphalor:coat-$minecraft_major_version:$coat_version"))

	modRuntimeOnly("com.terraformersmc:modmenu:$modmenu_version") {
		exclude group: "net.fabricmc.fabric-api"
	}
	modRuntimeOnly("net.fabricmc.fabric-api:fabric-api:$fabric_api_version")
}

// Workaround for https://github.com/gradle/gradle/issues/10195
configurations.include.transitive = true
configurations.include.dependencies.each {
	if (!it.name.contains("bom")) {
		it.transitive = false
	}
}

license {
	header = project.file('LICENSE_HEADER')

	include '**/*.java'
}

processResources {
	inputs.property "version", version

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
tasks.register('sourcesJar', Jar) {
	dependsOn classes
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		register('mod', MavenPublication) {
			artifactId = "${project.archives_base_name}-${project.minecraft_major_version}"
			from components.java
			java.withSourcesJar()
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

// Mod sites

static def getProjectChangelog() {
	return 'git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an --grep Version'.execute().text.trim()
}

tasks.register('uploadToModSites') {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("curseforgeToken")) {
	curseforge {
		apiKey project.curseforgeToken
		project {
			id = "443476"
			releaseType = project.mod_release
			changelogType = "markdown"
			changelog = getProjectChangelog()
			addGameVersion("Fabric")
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			relations {
				embeddedLibrary "fabric-api"
				embeddedLibrary "amecs"
				embeddedLibrary "tweed-api"
				optionalDependency "modmenu"
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

modrinth {
	if (project.hasProperty("modrinthToken")) {
		token = project.modrinthToken
		uploadToModSites.finalizedBy(tasks.modrinth)
	}

	projectId = "enYiOcBu"
	versionName = "[$project.mod_mc_version_specifier] $project.mod_version"
	versionType = project.mod_release
	changelog = getProjectChangelog()
	uploadFile = remapJar
	gameVersions = project.mod_mc_versions.split(";") as List<String>
	loaders = ["fabric"]
}
tasks.modrinth.group = "upload"

if (project.hasProperty("githubToken")) {
	githubRelease {
		token project.githubToken.toString()
		targetCommitish = project.minecraft_major_version
		releaseName = "Version $project.mod_version for $project.mod_mc_version_specifier"
		body = getProjectChangelog()
		releaseAssets remapJar.getArchiveFile()
		prerelease = mod_release != "release"
		overwrite = true
	}
	uploadToModSites.finalizedBy(tasks.githubRelease)
}
